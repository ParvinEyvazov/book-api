// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/parvineyvazov/book-api/model"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockIRepository) CreateAuthor(author model.Author) (model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", author)
	ret0, _ := ret[0].(model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockIRepositoryMockRecorder) CreateAuthor(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockIRepository)(nil).CreateAuthor), author)
}

// CreateBook mocks base method.
func (m *MockIRepository) CreateBook(book model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIRepositoryMockRecorder) CreateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIRepository)(nil).CreateBook), book)
}

// DeleteAuthor mocks base method.
func (m *MockIRepository) DeleteAuthor(id string) (model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", id)
	ret0, _ := ret[0].(model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockIRepositoryMockRecorder) DeleteAuthor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockIRepository)(nil).DeleteAuthor), id)
}

// DeleteBook mocks base method.
func (m *MockIRepository) DeleteBook(id string) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIRepositoryMockRecorder) DeleteBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIRepository)(nil).DeleteBook), id)
}

// GetAuthor mocks base method.
func (m *MockIRepository) GetAuthor(id string) (model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", id)
	ret0, _ := ret[0].(model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockIRepositoryMockRecorder) GetAuthor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockIRepository)(nil).GetAuthor), id)
}

// GetAuthors mocks base method.
func (m *MockIRepository) GetAuthors() (model.Authors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthors")
	ret0, _ := ret[0].(model.Authors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthors indicates an expected call of GetAuthors.
func (mr *MockIRepositoryMockRecorder) GetAuthors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthors", reflect.TypeOf((*MockIRepository)(nil).GetAuthors))
}

// GetBook mocks base method.
func (m *MockIRepository) GetBook(id string) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", id)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockIRepositoryMockRecorder) GetBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockIRepository)(nil).GetBook), id)
}

// GetBooks mocks base method.
func (m *MockIRepository) GetBooks() (model.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].(model.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockIRepositoryMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockIRepository)(nil).GetBooks))
}

// SearchAuthors mocks base method.
func (m *MockIRepository) SearchAuthors(search_text string) (model.Authors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAuthors", search_text)
	ret0, _ := ret[0].(model.Authors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAuthors indicates an expected call of SearchAuthors.
func (mr *MockIRepositoryMockRecorder) SearchAuthors(search_text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAuthors", reflect.TypeOf((*MockIRepository)(nil).SearchAuthors), search_text)
}

// SearchBooks mocks base method.
func (m *MockIRepository) SearchBooks(search_text string) (model.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBooks", search_text)
	ret0, _ := ret[0].(model.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBooks indicates an expected call of SearchBooks.
func (mr *MockIRepositoryMockRecorder) SearchBooks(search_text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBooks", reflect.TypeOf((*MockIRepository)(nil).SearchBooks), search_text)
}

// UpdateAuthor mocks base method.
func (m *MockIRepository) UpdateAuthor(id string, author model.Author) (model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", id, author)
	ret0, _ := ret[0].(model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockIRepositoryMockRecorder) UpdateAuthor(id, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockIRepository)(nil).UpdateAuthor), id, author)
}

// UpdateBook mocks base method.
func (m *MockIRepository) UpdateBook(id string, book model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", id, book)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockIRepositoryMockRecorder) UpdateBook(id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockIRepository)(nil).UpdateBook), id, book)
}
